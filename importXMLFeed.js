const { createClient } = require('@supabase/supabase-js');
const fetch = require('node-fetch');
const { parseStringPromise, Builder } = require('xml2js');
const fs = require('fs');
const { execSync } = require('child_process');

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);
const xmlUrl = "https://raw.githubusercontent.com/jurajorlicky/xml-import/refs/heads/main/feed.xml";
const xmlFilePath = './feed.xml';

async function importXMLFeed() {
  try {
    console.log("üöÄ Fetching XML feed...");
    const response = await fetch(xmlUrl);
    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }
    const xmlContent = await response.text();

    // Parse XML do JS objektu
    const parsedData = await parseStringPromise(xmlContent, { explicitArray: true });
    const items = parsedData.SHOP.SHOPITEM || [];

    console.log("üì° Fetching updated product prices and statuses from Supabase...");
    // Z√≠skame d√°ta z tabuƒæky 'product_price_view'
    const { data: productPrices, error: priceFetchError } = await supabase
      .from('product_price_view')
      .select('product_id, size, final_price, final_status');

    if (priceFetchError) {
      console.error("‚ùå Error fetching product prices:", priceFetchError);
      return;
    }

    // Vytvor√≠me mapu (product_id-size) -> { price, status }
    // Ak je final_price alebo final_status null, ulo≈æ√≠me tam re√°lne null
    const priceMap = new Map(
      productPrices.map(p => [
        `${p.product_id}-${p.size}`,
        { 
          price: p.final_price, 
          status: p.final_status 
        }
      ])
    );

    console.log("üõ† Updating XML feed...");
    let changesMade = false;

    for (const item of items) {
      // Over√≠me, ƒçi produkt obsahuje varianty
      if (!item.VARIANTS || !item.VARIANTS[0].VARIANT) {
        continue;
      }

      // Pre ka≈æd√Ω variant
      for (const variant of item.VARIANTS[0].VARIANT) {
        let size = "Unknown";
        try {
          size = variant.PARAMETERS[0].PARAMETER[0].VALUE[0];
        } catch (err) {
          console.warn(`‚ö†Ô∏è Could not extract size for item id ${item.$.id}:`, err);
        }

        // Vygenerujeme kƒæ√∫ƒç do mapy
        const key = `${item.$.id}-${size}`;
        const priceData = priceMap.get(key);

        // Ak v DB niƒç neexistuje, nech√°me p√¥vodn√© hodnoty
        if (!priceData) {
          console.log(`‚ùì No matching data in Supabase for key: ${key}. Skipping update...`);
          continue;
        }

        // priceData.price m√¥≈æe by≈• buƒè number alebo null
        // priceData.status m√¥≈æe by≈• buƒè string alebo null
        console.log(`üõ† ${item.$.id} - ${size} ‚Üí Cena: ${priceData.price}, Status: ${priceData.status}`);

        // Aktualiz√°cia PRICE_VAT, len ak nie je null
        if (priceData.price !== null) {
          const newPriceString = priceData.price.toString();
          if (variant.PRICE_VAT && variant.PRICE_VAT[0] !== newPriceString) {
            variant.PRICE_VAT[0] = newPriceString;
            changesMade = true;
          }
        }

        // Aktualiz√°cia AVAILABILITY_OUT_OF_STOCK, len ak nie je null
        if (priceData.status !== null) {
          if (variant.AVAILABILITY_OUT_OF_STOCK && variant.AVAILABILITY_OUT_OF_STOCK[0] !== priceData.status) {
            variant.AVAILABILITY_OUT_OF_STOCK[0] = priceData.status;
            changesMade = true;
          }
        }
      }
    }

    // Vygenerujeme nov√© XML
    const builder = new Builder({ headless: true, renderOpts: { pretty: true } });
    const updatedXml = builder.buildObject({ SHOP: { SHOPITEM: items } });

    // Porovnanie s existuj√∫cim feed.xml (ak existuje)
    if (fs.existsSync(xmlFilePath)) {
      const existingXml = fs.readFileSync(xmlFilePath, 'utf8');
      if (existingXml.trim() === updatedXml.trim()) {
        console.log("‚úÖ No changes in XML feed, skipping commit.");
        return;
      }
    }

    if (!changesMade) {
      console.log("‚úÖ No changes detected in product data, skipping commit.");
      return;
    }

    // Ulo≈æ√≠me nov√Ω feed.xml
    fs.writeFileSync(xmlFilePath, updatedXml);
    console.log("‚úÖ XML Feed updated!");

    // Commit a push do GitHub repozit√°ra
    console.log("üöÄ Committing and pushing XML feed to GitHub...");
    execSync("git config --global user.name 'GitHub Actions'");
    execSync("git config --global user.email 'actions@github.com'");
    execSync("git add feed.xml");
    try {
      execSync('git commit -m "üîÑ Auto-update XML feed"');
    } catch (commitError) {
      console.log("‚ÑπÔ∏è No changes to commit.");
    }
    execSync(`git push https://x-access-token:${process.env.GITHUB_TOKEN}@github.com/jurajorlicky/xml-import.git main`);
    console.log("‚úÖ XML feed successfully pushed to GitHub!");

  } catch (error) {
    console.error("‚ùå Error importing XML feed:", error);
  }
}

importXMLFeed();
