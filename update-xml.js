const fs = require('fs');
const axios = require('axios');
const { parseStringPromise, Builder } = require('xml2js');
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// üõ†Ô∏è Naƒç√≠tanie environment premenn√Ωch
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_KEY = process.env.SUPABASE_KEY;
const GITHUB_TOKEN = process.env.GITHUB_TOKEN;
const GITHUB_REPO = "jurajorlicky/xml-import";
const GITHUB_FILE_PATH = "feed.xml";
const GITHUB_API_URL = `https://api.github.com/repos/${GITHUB_REPO}/contents/${GITHUB_FILE_PATH}`;

// Inicializ√°cia Supabase klienta
const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);

// üîπ Stiahni XML feed zo s√∫boru alebo z GitHubu
async function fetchXMLFromGitHub() {
    try {
        console.log("üì• S≈•ahujem XML feed z GitHubu...");
        const response = await axios.get(GITHUB_API_URL, {
            headers: { Authorization: `token ${GITHUB_TOKEN}` }
        });

        const xmlContent = Buffer.from(response.data.content, 'base64').toString('utf-8');
        console.log("‚úÖ XML feed √∫spe≈°ne stiahnut√Ω!");
        return { xmlContent, sha: response.data.sha };
    } catch (error) {
        console.error("‚ùå Chyba pri s≈•ahovan√≠ XML:", error.response?.data || error.message);
        return null;
    }
}

// üîπ Naƒç√≠ta d√°ta z Supabase
async function fetchPricesFromSupabase() {
    console.log("üì° Naƒç√≠tavam ceny a dostupnos≈• z Supabase...");
    const { data, error } = await supabase
        .from("product_price_view")
        .select("size, final_price, final_status");

    if (error) {
        console.error("‚ùå Chyba pri naƒç√≠tan√≠ d√°t zo Supabase:", error);
        return null;
    }

    console.log("‚úÖ D√°ta z Supabase √∫spe≈°ne naƒç√≠tan√©!", data.length, "z√°znamov");
    console.log("üîç Debug - √ödaje zo Supabase:", data);

    return data.reduce((acc, row) => {
        acc[row.size.trim()] = { price: row.final_price, status: row.final_status };
        return acc;
    }, {});
}

// üîπ Aktualizuje ceny a dostupnos≈• v XML
async function updateXML(xmlContent, priceMap) {
    console.log("üîÑ Aktualizujem XML feed...");
    const parsedXML = await parseStringPromise(xmlContent);
    let changes = 0;

    parsedXML.SHOP.SHOPITEM.forEach(item => {
        if (item.VARIANTS && item.VARIANTS[0].VARIANT) {
            item.VARIANTS[0].VARIANT.forEach(variant => {
                if (variant.PARAMETERS && variant.PARAMETERS[0].PARAMETER) {
                    const size = variant.PARAMETERS[0].PARAMETER[0].VALUE[0].trim();

                    console.log(`üîç Debug - Produkt ${size} pred √∫pravou: ${JSON.stringify(variant)}`);

                    if (priceMap[size]) {
                        console.log(`‚úÖ Aktualizujem veƒækos≈• ${size}: cena ${priceMap[size].price}, status ${priceMap[size].status}`);
                        
                        variant.PRICE_VAT[0] = String(priceMap[size].price);

                        if (variant.AVAILABILITY_OUT_OF_STOCK) {
                            variant.AVAILABILITY_OUT_OF_STOCK[0] = priceMap[size].status;
                        } else if (variant.AVAILABILITY) {
                            variant.AVAILABILITY[0] = priceMap[size].status;
                        } else {
                            console.log(`‚ö†Ô∏è Ch√Ωba tag pre dostupnos≈• pre veƒækos≈• ${size}`);
                        }

                        changes++;
                    } else {
                        console.log(`‚ö†Ô∏è Veƒækos≈• ${size} nebola n√°jden√° v Supabase.`);
                    }
                }
            });
        }
    });

    if (changes === 0) {
        console.log("‚ö†Ô∏è Neboli vykonan√© ≈æiadne zmeny v XML. Skontroluj veƒækosti v Supabase.");
    } else {
        console.log(`‚úÖ Poƒçet aktualizovan√Ωch z√°znamov: ${changes}`);
    }

    const builder = new Builder();
    return builder.buildObject(parsedXML);
}

// üîπ Nahraje XML na GitHub
async function uploadXMLToGitHub(updatedXML, sha) {
    console.log("üì§ Nahr√°vam aktualizovan√Ω XML feed na GitHub...");
    console.log("üîç Debug - XML tesne pred uploadom:", updatedXML.substring(0, 500));
    console.log("üîç Debug - SHA star√©ho s√∫boru:", sha);

    const encodedContent = Buffer.from(updatedXML).toString('base64');

    const updateData = {
        message: "Automatick√° aktualiz√°cia XML feedu",
        content: encodedContent,
        sha
    };

    try {
        await axios.put(GITHUB_API_URL, updateData, {
            headers: { Authorization: `token ${GITHUB_TOKEN}` }
        });

        console.log("‚úÖ XML feed bol √∫spe≈°ne aktualizovan√Ω na GitHube.");
    } catch (error) {
        console.error("‚ùå Chyba pri nahr√°van√≠ XML na GitHub:", error.response?.data || error.message);
    }
}

// üîπ Hlavn√° funkcia
async function main() {
    const xmlData = await fetchXMLFromGitHub();
    if (!xmlData) return;

    const priceMap = await fetchPricesFromSupabase();
    if (!priceMap) return;

    const updatedXML = await updateXML(xmlData.xmlContent, priceMap);
    await uploadXMLToGitHub(updatedXML, xmlData.sha);
}

main();
